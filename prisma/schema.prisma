generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Container {
  id          Int       @id @default(autoincrement())
  number      String    @unique
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  Lockers     Locker[]
}

model Locker {
  id           Int             @id @default(autoincrement())
  lockerNumber String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  description  String?
  status       LockerStatus
  deliveries   DeliveryOrder[]
  Container    Container[]
}

model DeliveryOrder {
  id              Int              @id @default(autoincrement())
  containerNumber String
  lockerId        Int
  locker          Locker        @relation(fields: [lockerId], references: [id])
  pickupCode      String        @unique
  status          DeliveryStatus
  paymentStatus   PaymentStatus
  pickupMobile    String         
  deliveryMobile  String        @default("")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deliveredAt     DateTime?
  pickedUpAt      DateTime?

  Payment Payment[]
}

model Payment {
  id          Int       @id @default(autoincrement())
  amount      Float
  status      PaymentStatus
  deliveryId  Int       @unique
  delivery    DeliveryOrder @relation(fields: [deliveryId], references: [id])
  InvoiceId   String?    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model QPayToken {
  id               Int       @id @default(autoincrement())
  paymentId        String    @default("")
  accessToken      String  
  refreshToken     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  expiresIn        Int
  refreshExpiresIn Int
}

model SMS {
  id          Int       @id @default(autoincrement())
  phoneNumber String
  message     String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  phoneNumber String?
  role        String    @default("ADMIN") // USER, ADMIN
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum LockerStatus {
  AVAILABLE
  OCCUPIED
  PENDING
  MAINTENANCE
}

enum DeliveryStatus {
  WAITING
  PENDING
  DELIVERED
  PICKED_UP
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}
